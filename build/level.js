// Generated by CoffeeScript 1.10.0
(function() {
  this.Level = (function() {
    Level.prototype.OFFSET = 150;

    function Level(game) {
      this.game = game;
      this.index = 0;
      $.getJSON('src/levels.json', (function(_this) {
        return function(json) {
          _this.levels = json['levels'];
          return _this.load(_this.index);
        };
      })(this));
    }

    Level.prototype.hasNextLevel = function() {
      return this.index < this.levels.length - 1;
    };

    Level.prototype.nextLevel = function() {
      this.index += 1;
      this.clear();
      return this.load(this.index);
    };

    Level.prototype.currentLength = function() {
      return this.length - this.OFFSET;
    };

    Level.prototype.load = function(num) {
      var i, len, level, obstacle, ref, results;
      this.obstacles = [];
      level = this.levels[num];
      this.length = level.length;
      this.floor = new Cube(this.game, 100, this.length, 10);
      this.floor.setPosition(0, (this.length / 2) - this.OFFSET, 0);
      this.floor.setName('Floor');
      ref = level['obstacles'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        obstacle = ref[i];
        if (obstacle.type === 'Low') {
          results.push(this.obstacles.push(new Low(this.game, obstacle.y, obstacle.lane)));
        } else if (obstacle.type === 'High') {
          results.push(this.obstacles.push(new High(this.game, obstacle.y, obstacle.lane)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Level.prototype.clear = function() {
      var i, len, obstacle, ref;
      ref = this.obstacles;
      for (i = 0, len = ref.length; i < len; i++) {
        obstacle = ref[i];
        obstacle.destroy();
      }
      return this.floor.destroy();
    };

    return Level;

  })();

}).call(this);
